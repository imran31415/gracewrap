package main

import (
	"context"
	"log"
	"time"

	"github.com/imran31415/gracewrap"
	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"
)

// Your existing gRPC service
type myService struct{}

func (s *myService) SayHello(ctx context.Context, req *HelloRequest) (*HelloResponse, error) {
	return &HelloResponse{Message: "Hello " + req.Name}, nil
}

// Your existing protobuf messages (simplified for example)
type HelloRequest struct {
	Name string
}

type HelloResponse struct {
	Message string
}

// Your existing gRPC service interface
type MyServiceServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
}

func main() {
	// Create graceful wrapper
	graceful := gracewrap.New(&gracewrap.Config{
		DrainTimeout:    30 * time.Second,
		HardStopTimeout: 5 * time.Second,
		EnableMetrics:   true,
	})

	// Create gRPC server with graceful interceptors
	grpcServer := graceful.NewGRPCServer()

	// Register your existing service
	RegisterMyServiceServer(grpcServer, &myService{})
	reflection.Register(grpcServer)

	// Start the gRPC server
	_, listener, err := graceful.ServeGRPC(":9090")
	if err != nil {
		log.Fatal(err)
	}

	log.Printf("gRPC server starting on %s", listener.Addr())
	log.Println("Send SIGTERM to test graceful shutdown")

	// Wait for shutdown signal
	ctx := context.Background()
	if err := graceful.Wait(ctx); err != nil {
		log.Fatal(err)
	}

	log.Println("gRPC server shutdown complete")
}

// Simplified service registration (in real code, this would be generated by protoc)
func RegisterMyServiceServer(s *grpc.Server, srv MyServiceServer) {
	// This would be generated by protoc-gen-go-grpc
	// For this example, we'll just register a simple method
}
